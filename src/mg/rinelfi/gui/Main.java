/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mg.rinelfi.gui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Toolkit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.border.Border;
import mg.rinelfi.classes.DateFormater;
import mg.rinelfi.classes.NumberFormater;

/**
 *
 * @author rinelfi
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    private boolean enMarche = false;
    private boolean initialized = true;
    private boolean poursuivre = false;
    private long secondes = 0;

    public Main() {
        initComponents();
        toutInitialiser();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        zoneCritere = new javax.swing.JPanel();
        avertSlide = new javax.swing.JSlider();
        tarifLab = new javax.swing.JLabel();
        setPlafondChk = new javax.swing.JCheckBox();
        plafondLab = new javax.swing.JLabel();
        minLab = new javax.swing.JLabel();
        avertLab = new javax.swing.JLabel();
        tarifInput = new javax.swing.JSpinner();
        minInput = new javax.swing.JSpinner();
        plafondInput = new javax.swing.JSpinner();
        avertInput = new javax.swing.JSpinner();
        zoneVisualisation = new javax.swing.JPanel();
        jaugeLab = new javax.swing.JLabel();
        hour = new javax.swing.JLabel();
        hourLab = new javax.swing.JLabel();
        deviseLab = new javax.swing.JLabel();
        jaugeProgress = new javax.swing.JProgressBar();
        seconde = new javax.swing.JLabel();
        depenseLab = new javax.swing.JLabel();
        tempsConnectLab = new javax.swing.JLabel();
        minuteLab = new javax.swing.JLabel();
        depenseShowLab = new javax.swing.JLabel();
        minute = new javax.swing.JLabel();
        secondeLab = new javax.swing.JLabel();
        startBtn = new javax.swing.JButton();
        initializeBtn = new javax.swing.JButton();
        initializeBtn1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cyber counter (By rinelfi)");
        setBackground(new java.awt.Color(255, 255, 255));
        setLocation(this.setLocate());
        setResizable(false);
        setSize(new java.awt.Dimension(284, 353));

        zoneCritere.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("DejaVu Serif", 1, 14))); // NOI18N

        avertSlide.setFont(new java.awt.Font("FreeSans", 0, 13)); // NOI18N
        avertSlide.setForeground(new java.awt.Color(255, 51, 51));
        avertSlide.setValue(0);
        avertSlide.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                avertSlideStateChanged(evt);
            }
        });

        tarifLab.setFont(new java.awt.Font("FreeSans", 0, 13)); // NOI18N
        tarifLab.setText("Tarif par minute");

        setPlafondChk.setFont(new java.awt.Font("FreeSans", 0, 13)); // NOI18N
        setPlafondChk.setText("Définir un plafond");
        setPlafondChk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setPlafondChkActionPerformed(evt);
            }
        });

        plafondLab.setFont(new java.awt.Font("FreeSans", 0, 13)); // NOI18N
        plafondLab.setText("Plafond de paye");

        minLab.setFont(new java.awt.Font("FreeSans", 0, 13)); // NOI18N
        minLab.setText("Minimal à payer");

        avertLab.setFont(new java.awt.Font("FreeSans", 0, 13)); // NOI18N
        avertLab.setText("Avertir quand la somme atteint");

        avertInput.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                avertInputStateChanged(evt);
            }
        });

        javax.swing.GroupLayout zoneCritereLayout = new javax.swing.GroupLayout(zoneCritere);
        zoneCritere.setLayout(zoneCritereLayout);
        zoneCritereLayout.setHorizontalGroup(
            zoneCritereLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(zoneCritereLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(zoneCritereLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tarifLab)
                    .addComponent(minLab)
                    .addComponent(plafondLab)
                    .addComponent(avertLab)
                    .addComponent(setPlafondChk)
                    .addComponent(avertSlide, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(zoneCritereLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(plafondInput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(avertInput, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(minInput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tarifInput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        zoneCritereLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {avertInput, minInput, plafondInput, tarifInput});

        zoneCritereLayout.setVerticalGroup(
            zoneCritereLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(zoneCritereLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(zoneCritereLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tarifLab)
                    .addComponent(tarifInput, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(zoneCritereLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minLab)
                    .addComponent(minInput, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(setPlafondChk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(zoneCritereLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(plafondLab)
                    .addComponent(plafondInput, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(avertLab)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(zoneCritereLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(avertSlide, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(avertInput, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        zoneCritereLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {avertInput, avertSlide});

        zoneVisualisation.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Noto Serif CJK JP", 0, 14))); // NOI18N

        jaugeLab.setFont(new java.awt.Font("FreeSans", 0, 13)); // NOI18N
        jaugeLab.setText("Jauge de dépense");

        hour.setFont(new java.awt.Font("Noto Serif CJK KR", 0, 18)); // NOI18N
        hour.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        hour.setText("00");

        hourLab.setFont(new java.awt.Font("Noto Serif CJK KR", 0, 18)); // NOI18N
        hourLab.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        hourLab.setText("H");

        deviseLab.setFont(new java.awt.Font("Noto Serif CJK KR", 0, 18)); // NOI18N
        deviseLab.setText("Ariary");

        jaugeProgress.setForeground(new java.awt.Color(255, 51, 51));

        seconde.setFont(new java.awt.Font("Noto Serif CJK KR", 0, 18)); // NOI18N
        seconde.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        seconde.setText("00");

        depenseLab.setFont(new java.awt.Font("FreeSans", 0, 13)); // NOI18N
        depenseLab.setText("Votre dépense");

        tempsConnectLab.setFont(new java.awt.Font("FreeSans", 0, 13)); // NOI18N
        tempsConnectLab.setText("Vous êtes connéctés depuis");

        minuteLab.setFont(new java.awt.Font("Noto Serif CJK KR", 0, 18)); // NOI18N
        minuteLab.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        minuteLab.setText("Min");

        depenseShowLab.setFont(new java.awt.Font("Noto Serif CJK KR", 0, 18)); // NOI18N
        depenseShowLab.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        depenseShowLab.setText("0.00");

        minute.setFont(new java.awt.Font("Noto Serif CJK KR", 0, 18)); // NOI18N
        minute.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        minute.setText("00");

        secondeLab.setFont(new java.awt.Font("Noto Serif CJK KR", 0, 18)); // NOI18N
        secondeLab.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        secondeLab.setText("Sec");

        javax.swing.GroupLayout zoneVisualisationLayout = new javax.swing.GroupLayout(zoneVisualisation);
        zoneVisualisation.setLayout(zoneVisualisationLayout);
        zoneVisualisationLayout.setHorizontalGroup(
            zoneVisualisationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(zoneVisualisationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(zoneVisualisationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jaugeLab)
                    .addComponent(depenseLab)
                    .addComponent(tempsConnectLab)
                    .addGroup(zoneVisualisationLayout.createSequentialGroup()
                        .addGroup(zoneVisualisationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, zoneVisualisationLayout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(depenseShowLab, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deviseLab))
                            .addComponent(jaugeProgress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(zoneVisualisationLayout.createSequentialGroup()
                                .addGap(65, 65, 65)
                                .addComponent(hour)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(hourLab)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(minute)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(minuteLab)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(seconde)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(secondeLab)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        zoneVisualisationLayout.setVerticalGroup(
            zoneVisualisationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(zoneVisualisationLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jaugeLab)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jaugeProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(depenseLab)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(zoneVisualisationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(depenseShowLab)
                    .addComponent(deviseLab))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tempsConnectLab)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(zoneVisualisationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hour)
                    .addComponent(hourLab)
                    .addComponent(minute)
                    .addComponent(minuteLab)
                    .addComponent(seconde)
                    .addComponent(secondeLab)))
        );

        startBtn.setFont(new java.awt.Font("FreeSans", 0, 13)); // NOI18N
        startBtn.setText("Commencer");
        startBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startBtnActionPerformed(evt);
            }
        });

        initializeBtn.setFont(new java.awt.Font("FreeSans", 0, 13)); // NOI18N
        initializeBtn.setText("Reinitialiser");
        initializeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initializeBtnActionPerformed(evt);
            }
        });

        initializeBtn1.setFont(new java.awt.Font("FreeSans", 0, 13)); // NOI18N
        initializeBtn1.setText("Arrêter");
        initializeBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initializeBtn1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(zoneCritere, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(zoneVisualisation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(startBtn)
                        .addGap(18, 18, 18)
                        .addComponent(initializeBtn1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(initializeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(zoneCritere, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(zoneVisualisation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(initializeBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(initializeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setPlafondChkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setPlafondChkActionPerformed
        if (setPlafondChk.isSelected()) {
            activerPlafond();
        } else {
            desactiverPlafond();
        }
    }//GEN-LAST:event_setPlafondChkActionPerformed

    private void avertSlideStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_avertSlideStateChanged
        avertInput.setValue(avertSlide.getValue());
    }//GEN-LAST:event_avertSlideStateChanged

    private void startBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startBtnActionPerformed
        if (verifierDisponibilite() && !enMarche) {
            commencer();
        } else if (enMarche) {
            suspendre();
        }
    }//GEN-LAST:event_startBtnActionPerformed

    private void initializeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initializeBtnActionPerformed
        toutInitialiser();
    }//GEN-LAST:event_initializeBtnActionPerformed

    private void initializeBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initializeBtn1ActionPerformed
        arreter();
    }//GEN-LAST:event_initializeBtn1ActionPerformed

    private void avertInputStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_avertInputStateChanged
        avertSlide.setValue(Integer.valueOf(avertInput.getValue().toString()));
    }//GEN-LAST:event_avertInputStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner avertInput;
    private javax.swing.JLabel avertLab;
    private javax.swing.JSlider avertSlide;
    private javax.swing.JLabel depenseLab;
    private javax.swing.JLabel depenseShowLab;
    private javax.swing.JLabel deviseLab;
    private javax.swing.JLabel hour;
    private javax.swing.JLabel hourLab;
    private javax.swing.JButton initializeBtn;
    private javax.swing.JButton initializeBtn1;
    private javax.swing.JLabel jaugeLab;
    private javax.swing.JProgressBar jaugeProgress;
    private javax.swing.JSpinner minInput;
    private javax.swing.JLabel minLab;
    private javax.swing.JLabel minute;
    private javax.swing.JLabel minuteLab;
    private javax.swing.JSpinner plafondInput;
    private javax.swing.JLabel plafondLab;
    private javax.swing.JLabel seconde;
    private javax.swing.JLabel secondeLab;
    private javax.swing.JCheckBox setPlafondChk;
    private javax.swing.JButton startBtn;
    private javax.swing.JSpinner tarifInput;
    private javax.swing.JLabel tarifLab;
    private javax.swing.JLabel tempsConnectLab;
    private javax.swing.JPanel zoneCritere;
    private javax.swing.JPanel zoneVisualisation;
    // End of variables declaration//GEN-END:variables

    private Point setLocate() {
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        int x = 10;
        int y = 10;
        return new Point(x, y);
    }

    private void activerCritere() {
        boolean state = true;
        zoneCritere.setEnabled(state);
        tarifInput.setEnabled(state);
        minInput.setEnabled(state);
        setPlafondChk.setEnabled(state);
        plafondInput.setEnabled(state);
        avertSlide.setEnabled(state);
        avertInput.setEnabled(state);
        tarifLab.setEnabled(state);
        minLab.setEnabled(state);
        plafondLab.setEnabled(state);
        avertLab.setEnabled(state);

    }

    private void desactiverCritere() {
        boolean state = false;
        zoneCritere.setEnabled(state);
        tarifInput.setEnabled(state);
        minInput.setEnabled(state);
        setPlafondChk.setEnabled(state);
        plafondInput.setEnabled(state);
        avertSlide.setEnabled(state);
        avertInput.setEnabled(state);
        tarifLab.setEnabled(state);
        minLab.setEnabled(state);
        plafondLab.setEnabled(state);
        avertLab.setEnabled(state);
    }

    private void initialiserTarif() {
        tarifInput.setValue(0);
        minInput.setValue(0);
    }

    private void initialiserPlafond() {
        plafondInput.setValue(0);
        avertSlide.setValue(0);
        avertInput.setValue(0);
    }

    private void desactiverPlafond() {
        initialiserPlafond();
        boolean state = false;
        jaugeLab.setEnabled(state);
        avertLab.setEnabled(state);
        plafondLab.setEnabled(state);
        jaugeProgress.setEnabled(state);
        setPlafondChk.setSelected(state);
        plafondInput.setEnabled(state);
        avertSlide.setEnabled(state);
        avertInput.setEnabled(state);
    }

    private void activerPlafond() {
        initialiserPlafond();
        boolean state = true;
        jaugeLab.setEnabled(state);
        avertLab.setEnabled(state);
        plafondLab.setEnabled(state);
        jaugeProgress.setEnabled(state);
        setPlafondChk.setSelected(state);
        plafondInput.setEnabled(state);
        avertSlide.setEnabled(state);
        avertInput.setEnabled(state);
    }

    private void initialiserVue() {
        jaugeProgress.setValue(0);
        depenseShowLab.setText("0.00");
        hour.setText("00");
        minute.setText("00");
        seconde.setText("00");
        startBtn.setText("Commencer");
    }

    private void desactiverButtons() {
        startBtn.setEnabled(false);
        initializeBtn.setEnabled(false);
    }

    private void activerButtons() {
        startBtn.setEnabled(true);
        initializeBtn.setEnabled(true);
    }

    private void toutInitialiser() {
        enMarche = false;
        initialized = true;
        activerCritere();
        desactiverPlafond();
        initialiserTarif();
        initialiserVue();
    }

    private void commencer() {
        enMarche = true;
        initialized = false;
        startBtn.setText("Suspendre");
        desactiverCritere();
        compter();
    }

    private void poursuivre() {
        commencer();
    }

    private void suspendre() {
        enMarche = false;
        startBtn.setText("Poursuivre");
    }

    private int deviseEnPourcent(int devise, int plafond) {
        return (devise * 100) / plafond;
    }

    private void compter() {
        int parMinute = Integer.valueOf(tarifInput.getValue().toString());
        int minParMinute = Integer.valueOf(minInput.getValue().toString());
        int plafond = Integer.valueOf(plafondInput.getValue().toString());
        depenseShowLab.setText(new NumberFormater(minParMinute).formatString());
        if (setPlafondChk.isSelected()) {
            new Thread(new Runnable() {
                @Override
                public void run() {
                    while (enMarche) {
                        try {
                            DateFormater date = new DateFormater(secondes);
                            String h = "0" + date.getHour(), m = "0" + date.getMinute(), s = "0" + date.getSecond();
                            h = h.substring(h.length() - 2, h.length());
                            m = m.substring(m.length() - 2, m.length());
                            s = s.substring(s.length() - 2, s.length());
                            hour.setText(h);
                            minute.setText(m);
                            seconde.setText(s);
                            int secondeTotal = (int) (plafond * 60 / parMinute);
                            jaugeProgress.setValue(deviseEnPourcent((int) secondes, secondeTotal));
                            int devise = parMinute * date.getMinute() + date.getHour() * 60 * parMinute;
                            NumberFormater number = new NumberFormater(devise);
                            if (devise > minParMinute) {
                                depenseShowLab.setText(number.formatString());
                            }
                            if (poursuivre == false && (jaugeProgress.getValue() == avertSlide.getValue() && avertSlide.getValue() > 0 || jaugeProgress.getValue() == 100)) {
                                if (JOptionPane.showConfirmDialog(rootPane, "Vous avez atteint le plafond défini\nVotre consommation est à " + jaugeProgress.getValue() + "%\nVoulez-vous poursuivre?", "Notification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.NO_OPTION) {
                                    toutInitialiser();
                                } else {
                                    poursuivre = true;
                                }
                            }
                            secondes++;
                            Thread.sleep(1000);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    if (initialized) {
                        toutInitialiser();
                    }
                }
            }).start();
        } else {
            new Thread(new Runnable() {
                @Override
                public void run() {
                    while (enMarche) {
                        try {
                            DateFormater date = new DateFormater(secondes);
                            String h = "0" + date.getHour(), m = "0" + date.getMinute(), s = "0" + date.getSecond();
                            h = h.substring(h.length() - 2, h.length());
                            m = m.substring(m.length() - 2, m.length());
                            s = s.substring(s.length() - 2, s.length());
                            hour.setText(h);
                            minute.setText(m);
                            seconde.setText(s);
                            int devise = parMinute * date.getMinute() + date.getHour() * 60 * parMinute;
                            NumberFormater number = new NumberFormater(devise);
                            if (devise > minParMinute) {
                                depenseShowLab.setText(number.formatString());
                            }
                            secondes++;
                            Thread.sleep(1000);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }

                    if (initialized) {
                        toutInitialiser();
                    }
                }
            }).start();
        }
    }

    private boolean verifierDisponibilite() {
        boolean safe = true;
        String message = new String();
        if (Integer.valueOf(tarifInput.getValue().toString()) <= 0) {
            Border border = BorderFactory.createLineBorder(Color.RED, 1);
            tarifInput.setBorder(border);
            safe = false;
        }
        if (setPlafondChk.isSelected() && Integer.valueOf(plafondInput.getValue().toString()) <= 0) {
            Border border = BorderFactory.createLineBorder(Color.RED, 1);
            plafondInput.setBorder(border);
            safe = false;
        }
        if (!safe) {
            return safe;
        }
        Border border = null;
        plafondInput.setBorder(border);
        tarifInput.setBorder(border);
        return safe;
    }

    private void arreter() {
        enMarche = false;
        initialized = true;
        activerCritere();
        desactiverPlafond();
        initialiserVue();
        secondes = 0;
    }
}
